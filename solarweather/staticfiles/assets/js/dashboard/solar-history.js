// @copyright  2022 onwards Matthew Porritt (mattp@catalyst-au.net)
// @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
"use strict";const solarCharts={energyBalance:{id:"energy-balance-chart",chartObj:null,dataLabel:"grid_power_usage_real",type:"bar",invert:!0,suggestedMinVal:-5e3,suggestedMaxVal:5e3},generation:{id:"solar-generation-chart",chartObj:null,dataLabel:"inverter_ac_power",type:"line",invert:!1,suggestedMinVal:0,suggestedMaxVal:5e3}};class SolarChartConfig{constructor(e,a,t){this.config={type:e,data:{labels:[],datasets:[{backgroundColor:"#c68200",borderColor:"#FF8C00",data:[]}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1}},scales:{x:{grid:{color:"rgb(255, 255, 255, 0.5)"},ticks:{color:"rgb(255, 255, 255)"}},y:{grid:{color:"rgb(255, 255, 255, 0.5)"},ticks:{color:"rgb(255, 255, 255)"},suggestedMin:-5e3,suggestedMax:5e3}}}},void 0!==a&&(this.config.options.scales.y.suggestedMin=a),void 0!==t&&(this.config.options.scales.y.suggestedMax=t)}}let Chart;const updateGraphs=(e,a)=>{solarCharts[e].chartObj.data.labels=a.labels,solarCharts[e].chartObj.data.datasets[0].data=a.values,solarCharts[e].chartObj.update()},formatDate=e=>{const a=[];return new Promise(((t,r)=>{e.labels.forEach((e=>{const t=new Date(1e3*e),r=t.getHours()+":"+("0"+t.getMinutes()).substr(-2);a.push(r)})),t({labels:a,values:e.values})}))},formatTrend=(e,a)=>{const t=[],r=[];return new Promise(((o,n)=>{e.forEach((e=>{t.push(e[0]),!0===a?r.push(-1*e[1]):r.push(e[1])})),o({labels:t,values:r})}))},updateDashboard=e=>{const a=document.getElementById("dashboard-peak-usage-card"),t=a.querySelector(".loading-spinner"),r=a.querySelector(".overlay"),o=a.querySelectorAll(".blur"),n=document.getElementById("dashboard-daily-power-card"),s=n.querySelector(".loading-spinner"),l=n.querySelector(".overlay"),d=n.querySelectorAll(".blur"),i=document.getElementById("dashboard-energy-balance-card"),c=i.querySelector(".loading-spinner"),u=i.querySelector(".overlay"),g=i.querySelectorAll(".blur"),p=document.getElementById("dashboard-solar-generation-card"),m=p.querySelector(".loading-spinner"),y=p.querySelector(".overlay"),h=p.querySelectorAll(".blur"),b=document.getElementById("peak-usage-now"),_=document.getElementById("peak-usage-from-solar"),w=document.getElementById("peak-usage-from-grid"),v=document.getElementById("generated-day"),C=document.getElementById("generated-week"),x=document.getElementById("generated-month"),E=document.getElementById("used-day"),f=document.getElementById("used-week"),F=document.getElementById("used-month"),M=document.getElementById("energy-balance-surplus"),L=document.getElementById("solar-generation-total"),B=e.power_consumption.daily_max?e.power_consumption.daily_max:0,I=e.inverter_ac_power.daily_max?e.inverter_ac_power.daily_max:0,S=e.grid_power_usage_real.daily_max?e.grid_power_usage_real.daily_max:0,k=e.inverter_ac_power.day?e.inverter_ac_power.day:0,T=e.inverter_ac_power.week?e.inverter_ac_power.week:0,q=e.inverter_ac_power.month?e.inverter_ac_power.month:0,H=e.power_consumption.day?e.power_consumption.day:0,N=e.power_consumption.week?e.power_consumption.week:0,j=e.power_consumption.month?e.power_consumption.month:0,D=Number.parseFloat(B)/1e3,O=Number.parseFloat(I)/1e3,A=Number.parseFloat(S)/1e3,V=Number.parseFloat(k)/1e3,P=Number.parseFloat(T)/1e3,G=Number.parseFloat(q)/1e3,R=Number.parseFloat(H)/1e3,z=Number.parseFloat(N)/1e3,J=Number.parseFloat(j)/1e3,K=V-R;b.innerHTML=D.toFixed(3),_.innerHTML=O.toFixed(3),w.innerHTML=A.toFixed(3),v.innerHTML=V.toFixed(3),C.innerHTML=P.toFixed(1),x.innerHTML=G.toFixed(1),E.innerHTML=R.toFixed(3),f.innerHTML=z.toFixed(1),F.innerHTML=J.toFixed(1),M.innerHTML=K.toFixed(3),L.innerHTML=V.toFixed(3);for(const a in solarCharts)if({}.hasOwnProperty.call(solarCharts,a)){const t=solarCharts[a].dataLabel;formatTrend(e[t].daily_trend,solarCharts[a].invert).then(formatDate).then((e=>{updateGraphs(a,e)}))}t.style.display="none",r.style.display="none",o.forEach((e=>{e.classList.remove("blur")})),s.style.display="none",l.style.display="none",d.forEach((e=>{e.classList.remove("blur")})),c.style.display="none",u.style.display="none",g.forEach((e=>{e.classList.remove("blur")})),m.style.display="none",y.style.display="none",h.forEach((e=>{e.classList.remove("blur")}))},getData=e=>{fetch("/dataajax/?dashboard=solar&history=1&timestamp="+e).then((e=>e.json())).then((e=>updateDashboard(e)))},dateChange=e=>{const a=e.target.valueAsNumber/1e3;getData(a)};export const init=e=>{Chart=e;for(const e in solarCharts)if({}.hasOwnProperty.call(solarCharts,e)){const a=new SolarChartConfig(solarCharts[e].type,solarCharts[e].suggestedMinVal,solarCharts[e].suggestedMaxVal);solarCharts[e].chartObj=new Chart(document.getElementById(solarCharts[e].id),a.config)}const a=document.getElementById("history-date");a.addEventListener("change",dateChange);const t=a.valueAsNumber/1e3;getData(t)};